use aead::generic_array::GenericArray;
use chacha20poly1305::{aead::{Aead, KeyInit, Payload}, ChaCha20Poly1305};



const KEY: &[u8; 32] = &[
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
];

// no idea what this is but whatever
const AAD: &[u8; 12] = &[
    0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
];

const NONCE: &[u8; 24] = &[
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,
    0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
];

pub fn main() {
    //let key = GenericArray::from_slice(KEY);
    //let nonce = GenericArray::from_slice(NONCE);


    // let nonce = GenericArray::from_slice($nonce);
    //let payload = Payload {
    //    msg: $plaintext,
    //    aad: $aad,
    //};

    let binding = String::from("waddup my mans");
    let plaintext = binding.as_bytes();

    let payload = Payload {
        msg: plaintext,
        aad: AAD,
    };




    //let ciphertext = ChaCha20Poly1305::new(key).encrypt(NONCE, payload).unwrap();




}